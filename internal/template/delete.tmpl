package {{.Pkg}}

import (
  "context"
  "strings"
)

type {{$deleteBuilder}} struct {
  db *{{$db}}
  table string
  where *{{$whereBuilder}}
}

func new{{$deleteBuilder | titleCase}}(db *{{$db}}) *{{$deleteBuilder}} {
  return &{{$deleteBuilder}}{
    db: db,
    table: {{$table}},
  }
}

func (b *{{$deleteBuilder}}) Where(fn func (b *{{$whereBuilder}})) *{{$deleteBuilder}} {
  if b.where == nil {
    b.where = new{{$whereBuilder}}()
  }
  fn(b.where)
  return b
}

func (b *{{$deleteBuilder}}) SQL() (string, []interface{}) {
  var sb strings.Builder
  sb.WriteString("DELETE FROM ")
  sb.WriteString("`")
  sb.WriteString(b.table)
  sb.WriteString("`")

  if b.where != nil {
    sb.WriteString(" ")
    whereSQL, whereArgs := b.where.sql()
    sb.WriteString(whereSQL)
    return sb.String(), whereArgs
  }

  return sb.String(), nil
}

func (b *{{$deleteBuilder}}) Exec(ctx context.Context) (int64, error) {
  var ra int64
  e := new{{$deleteEvent | titleCase}}(ctx, b)
  return ra, b.db.exec(e, func(ctx context.Context, sql string, args ...interface{}) (interface{}, error) {
    res, err := b.db.ext.ExecContext(ctx, sql, args...)
    if err != nil {
      return 0, err
    }
    ra, err = res.RowsAffected()
    return ra, nil
  })
}
