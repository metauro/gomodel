package {{.Pkg}}

import (
  "context"
  "github.com/jmoiron/sqlx"
)

type {{$db}} struct {
  ext sqlx.ExtContext
  hooks []Hook
  handleError ErrorHandler
}

func New{{$db}}(db sqlx.ExtContext) *{{$db}} {
  return &{{$db}}{
    ext: db,
    handleError: defaultErrorHandler,
  }
}

func (db *{{$db}}) Insert() *{{$insertBuilder}} {
  return new{{$insertBuilder | titleCase}}(db)
}

func (db *{{$db}}) Update() *{{$updateBuilder}} {
  return new{{$updateBuilder | titleCase}}(db)
}

func (db *{{$db}}) Select() *{{$selectBuilder}} {
  return new{{$selectBuilder | titleCase}}(db)
}

func (db *{{$db}}) Delete() *{{$deleteBuilder}} {
  return new{{$deleteBuilder | titleCase}}(db)
}

func (db *{{$db}}) Use(hooks ...Hook) {
  for _, hook := range hooks {
    db.hooks = append(db.hooks, hook)
  }
}

func (db *{{$db}}) SetErrorHandler(handler ErrorHandler) {
  db.handleError = handler
}

func (db *{{$db}}) exec(
  e event,
  execute func (ctx context.Context, sql string, args ...interface{}) (interface{}, error),
) (error) {
  for _, hook := range db.hooks {
    err := hook.Before(e)
    if err != nil {
      return err
    }
  }

	value, err := execute(e.Context(), e.SQL(), e.Args()...)
  if err != nil {
    return db.handleError(err)
  }

  e.SetValue(value)
  for _, hook := range db.hooks {
    err := hook.After(e)
    if err != nil {
      return err
    }
  }

  return nil
}
